# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'c8519f89-a55b-4b32-9220-977816e85605'
  imageRepository: 'cicd'
  containerRegistry: 'bootcampregistry2.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

pool:
  pool
    

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      pool
    steps:
     - task: Docker@2
       displayName: Build and push an image to container registry
       inputs:
         command: buildAndPush
         repository: $(imageRepository)
         dockerfile: $(dockerfilePath)
         containerRegistry: $(dockerRegistryServiceConnection)
         tags: |
           $(tag)
  

# Continuous Deployment Process for Staging Environment
- stage: DeployToStaging
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  variables:
  - group: staging
  
  jobs:
  - deployment: staging
    displayName: Deploy to Staging
    environment:
      name: CD-stag
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: CmdLine@2
            displayName: 'update apt-get'
            inputs:
              script: 'sudo apt-get update'
          - task: CmdLine@2
            displayName: 'install-docker'
            inputs:
              script: |
                sudo apt-get install \
                              ca-certificates \
                              curl \
                              gnupg \
                              lsb-release
                           sudo mkdir -p /etc/apt/keyrings
                           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                           echo \
                            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                           sudo apt-get update
                           sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
          - task: CmdLine@2
            displayName: 'install azure-cli'
            inputs:
              script: 'sudo apt install azure-cli  -y'

          - task: AzureCLI@2
            displayName: 'login to container registry'
            inputs:
              azureSubscription: 'Azure subscription 1(d073c949-0930-4d14-96d0-241ec41d18e0)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az acr login --name BootcampRegistry2'
          - task: Docker@2
            inputs:
              containerRegistry: 'BootcampRegistry2'
              command: 'login'
          - task: CmdLine@2
            displayName: 'pull image from container registry'
            inputs:
              script: 'docker pull bootcampregistry2.azurecr.io/cicd:$(tag)'
          - task: CmdLine@2
            displayName: Stop Current Container
            inputs:
             script: 'docker rm -f  cicd  || true'
          - task: CmdLine@2
            displayName: 'run docker container'
            inputs:
              script: 'docker run --restart=always --name cicd -d -p 8080:8080 -e PGHOST=$(PGHOST) -e PGUSERNAME=$(PGUSERNAME) -e PGDATABASE=postgres -e PGPASSWORD=$(PGPASSWORD) -e PGPORT=5432 -e PORT=8080 -e HOST=0.0.0.0 -e HOST_URL=$(HOST_URL) -e COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD) -e NODE_ENV=development -e OKTA_ORG_URL=$(OKTA_ORG_URL) -e OKTA_CLIENT_ID=$(OKTA_CLIENT_ID) -e OKTA_CLIENT_SECRET=$(OKTA_CLIENT_SECRET) bootcampregistry2.azurecr.io/cicd:$(tag)'

# Continuous Deployment Process for Production Environment
- stage: DeployToProduction
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  variables:
  - group: production
  
  jobs:
  - deployment: production
    displayName: Deploy to Production
    environment:
      name: CD-production
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: CmdLine@2
            displayName: 'update apt-get'
            inputs:
              script: 'sudo apt-get update'
          - task: CmdLine@2
            displayName: 'install docker'
            inputs:
              script: |
                sudo apt-get install \
                              ca-certificates \
                              curl \
                              gnupg \
                              lsb-release
                           sudo mkdir -p /etc/apt/keyrings
                           curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                           echo \
                            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                           sudo apt-get update
                           sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
          - task: CmdLine@2
            displayName: 'install azure-cli'
            inputs:
              script: 'sudo apt install azure-cli  -y'

          - task: AzureCLI@2
            displayName: 'login to container registry'
            inputs:
              azureSubscription: 'Azure subscription 1(d073c949-0930-4d14-96d0-241ec41d18e0)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az acr login --name BootcampRegistry2'
          - task: Docker@2
            inputs:
              containerRegistry: 'BootcampRegistry2'
              command: 'login'
          - task: CmdLine@2
            displayName: 'pull image from container registry'
            inputs:
              script: 'docker pull bootcampregistry2.azurecr.io/cicd:$(tag)'
          - task: CmdLine@2
            displayName: Stop Current Container
            inputs:
             script: 'docker rm -f  cicd  || true'
          - task: CmdLine@2
            displayName: 'run docker container'
            inputs:
              script: 'docker run --restart=always --name cicd -d -p 8080:8080 -e PGHOST=$(PGHOST) -e PGUSERNAME=$(PGUSERNAME) -e PGDATABASE=postgres -e PGPASSWORD=$(PGPASSWORD) -e PGPORT=5432 -e PORT=8080 -e HOST=0.0.0.0 -e HOST_URL=$(HOST_URL) -e COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD) -e NODE_ENV=development -e OKTA_ORG_URL=$(OKTA_ORG_URL) -e OKTA_CLIENT_ID=$(OKTA_CLIENT_ID) -e OKTA_CLIENT_SECRET=$(OKTA_CLIENT_SECRET) $(containerRegistry)/$(imageRepository):$(tag)'
